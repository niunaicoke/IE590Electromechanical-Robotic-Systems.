#include <Arduino.h>
#include <LiquidCrystal.h>

// Define pin numbers
const int buzzerPin = 6;
const int previousButtonPin = 8;
const int pauseButtonPin = 9;
const int nextButtonPin = 10;


const int zeldaslullabyTempo = 80;
const int zeldathameTempo = 80;
const int merryChristmasTempo = 80;

// Initialize the LiquidCrystal class and specify the interface pins
LiquidCrystal lcd(12, 11, 5, 4, 3, 2);

// Define the notes of the melodies:
#define NOTE_B0  31
#define NOTE_C1  33
#define NOTE_CS1 35
#define NOTE_D1  37
#define NOTE_DS1 39
#define NOTE_E1  41
#define NOTE_F1  44
#define NOTE_FS1 46
#define NOTE_G1  49
#define NOTE_GS1 52
#define NOTE_A1  55
#define NOTE_AS1 58
#define NOTE_B1  62
#define NOTE_C2  65
#define NOTE_CS2 69
#define NOTE_D2  73
#define NOTE_DS2 78
#define NOTE_E2  82
#define NOTE_F2  87
#define NOTE_FS2 93
#define NOTE_G2  98
#define NOTE_GS2 104
#define NOTE_A2  110
#define NOTE_AS2 117
#define NOTE_B2  123
#define NOTE_C3  131
#define NOTE_CS3 139
#define NOTE_D3  147
#define NOTE_DS3 156
#define NOTE_E3  165
#define NOTE_F3  175
#define NOTE_FS3 185
#define NOTE_G3  196
#define NOTE_GS3 208
#define NOTE_A3  220
#define NOTE_AS3 233
#define NOTE_B3  247
#define NOTE_C4  262
#define NOTE_CS4 277
#define NOTE_D4  294
#define NOTE_DS4 311
#define NOTE_E4  330
#define NOTE_F4  349
#define NOTE_FS4 370
#define NOTE_G4  392
#define NOTE_GS4 415
#define NOTE_A4  440
#define NOTE_AS4 466
#define NOTE_B4  494
#define NOTE_C5  523
#define NOTE_CS5 554
#define NOTE_D5  587
#define NOTE_DS5 622
#define NOTE_E5  659
#define NOTE_F5  698
#define NOTE_FS5 740
#define NOTE_G5  784
#define NOTE_GS5 831
#define NOTE_A5  880
#define NOTE_AS5 932
#define NOTE_B5  988
#define NOTE_C6  1047
#define NOTE_CS6 1109
#define NOTE_D6  1175
#define NOTE_DS6 1245
#define NOTE_E6  1319
#define NOTE_F6  1397
#define NOTE_FS6 1480
#define NOTE_G6  1568
#define NOTE_GS6 1661
#define NOTE_A6  1760
#define NOTE_AS6 1865
#define NOTE_B6  1976
#define NOTE_C7  2093
#define NOTE_CS7 2217
#define NOTE_D7  2349
#define NOTE_DS7 2489
#define NOTE_E7  2637
#define NOTE_F7  2794
#define NOTE_FS7 2960
#define NOTE_G7  3136
#define NOTE_GS7 3322
#define NOTE_A7  3520
#define NOTE_AS7 3729
#define NOTE_B7  3951
#define NOTE_C8  4186
#define NOTE_CS8 4435
#define NOTE_D8  4699
#define NOTE_DS8 4978
#define REST      0

// zelda slullaby melody
int zeldaslullabyMelody[] = {
  NOTE_E4,2, NOTE_G4,4,
  NOTE_D4,2, NOTE_C4,8, NOTE_D4,8, 
  NOTE_E4,2, NOTE_G4,4,
  NOTE_D4,-2,
  NOTE_E4,2, NOTE_G4,4,
  NOTE_D5,2, NOTE_C5,4,
  NOTE_G4,2, NOTE_F4,8, NOTE_E4,8, 
  NOTE_D4,-2,
  NOTE_E4,2, NOTE_G4,4,
  NOTE_D4,2, NOTE_C4,8, NOTE_D4,8, 
  NOTE_E4,2, NOTE_G4,4,
  NOTE_D4,-2,
  NOTE_E4,2, NOTE_G4,4,

};

int zeldaslullabyNotes = sizeof(zeldaslullabyMelody) / sizeof(zeldaslullabyMelody[0]);


// Zeldathame melody
int zeldathameMelody[] = {
  NOTE_AS4,-2,  NOTE_F4,8,  NOTE_F4,8,  NOTE_AS4,8,
  NOTE_GS4,16,  NOTE_FS4,16,  NOTE_GS4,-2,
  NOTE_AS4,-2,  NOTE_FS4,8,  NOTE_FS4,8,  NOTE_AS4,8,
  NOTE_A4,16,  NOTE_G4,16,  NOTE_A4,-2,
  REST,1, 

  NOTE_AS4,4,  NOTE_F4,-4,  NOTE_AS4,8,  NOTE_AS4,16,  NOTE_C5,16, NOTE_D5,16, NOTE_DS5,16,
  NOTE_F5,2,  NOTE_F5,8,  NOTE_F5,8,  NOTE_F5,8,  NOTE_FS5,16, NOTE_GS5,16,
  NOTE_AS5,-2,  NOTE_AS5,8,  NOTE_AS5,8,  NOTE_GS5,8,  NOTE_FS5,16,
  NOTE_GS5,-8,  NOTE_FS5,16,  NOTE_F5,2,  NOTE_F5,4,

  NOTE_DS5,-8, NOTE_F5,16, NOTE_FS5,2, NOTE_F5,8, NOTE_DS5,8,
  NOTE_CS5,-8, NOTE_DS5,16, NOTE_F5,2, NOTE_DS5,8, NOTE_CS5,8,
  NOTE_C5,-8, NOTE_D5,16, NOTE_E5,2, NOTE_G5,8,
  NOTE_F5,16, NOTE_F4,16, NOTE_F4,16, NOTE_F4,16,NOTE_F4,16,NOTE_F4,16,NOTE_F4,16,NOTE_F4,16,NOTE_F4,8, NOTE_F4,16,NOTE_F4,8,

  NOTE_AS4,4,  NOTE_F4,-4,  NOTE_AS4,8,  NOTE_AS4,16,  NOTE_C5,16, NOTE_D5,16, NOTE_DS5,16,
  NOTE_F5,2,  NOTE_F5,8,  NOTE_F5,8,  NOTE_F5,8,  NOTE_FS5,16, NOTE_GS5,16,
  NOTE_AS5,-2, NOTE_CS6,4,
  NOTE_C6,4, NOTE_A5,2, NOTE_F5,4,
  NOTE_FS5,-2, NOTE_AS5,4,
  NOTE_A5,4, NOTE_F5,2, NOTE_F5,4,

  NOTE_FS5,-2, NOTE_AS5,4,
  NOTE_A5,4, NOTE_F5,2, NOTE_D5,4,
  NOTE_DS5,-2, NOTE_FS5,4,
  NOTE_F5,4, NOTE_CS5,2, NOTE_AS4,4,
  NOTE_C5,-8, NOTE_D5,16, NOTE_E5,2, NOTE_G5,8, 
  NOTE_F5,16, NOTE_F4,16, NOTE_F4,16, NOTE_F4,16,NOTE_F4,16,NOTE_F4,16,NOTE_F4,16,NOTE_F4,16,NOTE_F4,8, NOTE_F4,16,NOTE_F4,8,
};

int zeldathameNotes = sizeof(zeldathameMelody) / sizeof(zeldathameMelody[0]);


// Merry Christmas melody
int merryChristmasMelody[] = {
  NOTE_C5,4, //1
  NOTE_F5,4, NOTE_F5,8, NOTE_G5,8, NOTE_F5,8, NOTE_E5,8,
  NOTE_D5,4, NOTE_D5,4, NOTE_D5,4,
  NOTE_G5,4, NOTE_G5,8, NOTE_A5,8, NOTE_G5,8, NOTE_F5,8,
  NOTE_E5,4, NOTE_C5,4, NOTE_C5,4,
  NOTE_A5,4, NOTE_A5,8, NOTE_AS5,8, NOTE_A5,8, NOTE_G5,8,
  NOTE_F5,4, NOTE_D5,4, NOTE_C5,8, NOTE_C5,8,
  NOTE_D5,4, NOTE_G5,4, NOTE_E5,4,

  NOTE_F5,2, NOTE_C5,4, //8 
  NOTE_F5,4, NOTE_F5,8, NOTE_G5,8, NOTE_F5,8, NOTE_E5,8,
  NOTE_D5,4, NOTE_D5,4, NOTE_D5,4,
  NOTE_G5,4, NOTE_G5,8, NOTE_A5,8, NOTE_G5,8, NOTE_F5,8,
  NOTE_E5,4, NOTE_C5,4, NOTE_C5,4,
  NOTE_A5,4, NOTE_A5,8, NOTE_AS5,8, NOTE_A5,8, NOTE_G5,8,

};

int merryChristmasNotes = sizeof(merryChristmasMelody) / sizeof(merryChristmasMelody[0]);


// Song titles
const char* songTitles[] = {"zelda slullaby", "zelda thame", "merry Christmas"};

// Current song and state
int currentSong = 0;
bool isPaused = false;

void setup() {
  pinMode(buzzerPin, OUTPUT);
  pinMode(previousButtonPin, INPUT_PULLUP);
  pinMode(pauseButtonPin, INPUT_PULLUP);
  pinMode(nextButtonPin, INPUT_PULLUP);

  lcd.begin(16, 2); // initialize the lcd

  // Start serial communication for debugging
  Serial.begin(9600);
}




void loop() {
  // Read the button states
  bool previousPressed = digitalRead(previousButtonPin) == LOW;
  bool pausePressed = digitalRead(pauseButtonPin) == LOW;
  bool nextPressed = digitalRead(nextButtonPin) == LOW;

  // Handle previous button press
  if (previousPressed) {
    if (currentSong > 0) {
      currentSong--;
    } else {
      currentSong = 2; // Go to the last song if we are at the first song
    }
    isPaused = false;
    playSong(currentSong);
  }

  // Handle pause button press
  if (pausePressed) {
    isPaused = !isPaused;
    if (isPaused) {
      noTone(buzzerPin); // Stop the buzzer if paused
    } else {
      playSong(currentSong); // Resume playing the current song
    }
  }

  // Handle next button press
  if (nextPressed) {
    currentSong = (currentSong + 1) % 3; // Go to the next song, wrap around if at the last song
    isPaused = false;
    playSong(currentSong);
  }

  // Debounce delay
  delay(20);
}

void playSong(int songNumber) {
  lcd.clear();
  lcd.print(songTitles[songNumber]);

  int noteCount = 0;
  int *melody;
  int tempo;
  
  switch (songNumber) {
    case 0:
      melody = zeldaslullabyMelody;
      noteCount = zeldaslullabyNotes;
      tempo = zeldaslullabyTempo;
      break;
    case 1:
      melody = zeldathameMelody;
      noteCount = zeldathameNotes;
      tempo = zeldathameTempo;
      break;
    case 2:
      melody = merryChristmasMelody;
      noteCount = merryChristmasNotes;
      tempo = merryChristmasTempo;
      break;
  }

  int wholenote = (60000 * 4) / tempo;
  int divider = 0, noteDuration = 0;
  unsigned long noteStartTime = millis();
  unsigned long currentNoteDuration = 0;
  int thisNote = 0;

  while (thisNote < noteCount) {
    // Check if it's time to play the next note
    if (millis() - noteStartTime >= currentNoteDuration) {
      // Play the current note
      divider = melody[thisNote + 1];
      if (divider > 0) {
        noteDuration = wholenote / divider;
      } else if (divider < 0) {
        noteDuration = wholenote / -divider;
        noteDuration *= 1.5; // Apply dotting
      }
      currentNoteDuration = noteDuration * 0.9; // Adjust for note pause

      if (melody[thisNote] != REST) {
        tone(buzzerPin, melody[thisNote], currentNoteDuration);
      } else {
        noTone(buzzerPin); // No tone for rests
      }
      
      noteStartTime = millis(); // Reset the timer
      thisNote += 2; // Move to the next note
    }









    //previous_button
    if (digitalRead(previousButtonPin) == LOW) {
      currentSong = currentSong > 0 ? currentSong - 1 : 2;
      while(digitalRead(previousButtonPin) == LOW); // Wait for button release
      delay(20); // Debounce delay
      playSong(currentSong);
      return; // Exit the current playSong function
    }
    //next_button
    if (digitalRead(nextButtonPin) == LOW) {
      currentSong = (currentSong + 1) % 3;
      while(digitalRead(nextButtonPin) == LOW); // Wait for button release
      delay(20); // Debounce delay
      playSong(currentSong);
      return; // Exit the current playSong function
    }
    //pause_Button
    if (digitalRead(pauseButtonPin) == LOW) {
      isPaused = !isPaused;
      while(digitalRead(pauseButtonPin) == LOW); // Wait for button release
      delay(20); // Debounce delay
      if (isPaused) {
        noTone(buzzerPin); // Stop the tone playing
        while (isPaused) {
          // Check if pause button is pressed again
          if (digitalRead(pauseButtonPin) == LOW) {
            isPaused = false;
            while(digitalRead(pauseButtonPin) == LOW); // Wait for button release
            delay(20); // Debounce delay
            noteStartTime = millis(); // Reset the note start time
            break; // Break out of the pause loop
          }
        }
      }
    }
  }
  noTone(buzzerPin); // No tone at the end
}
